version: '3.9'

# Full-stack Docker Compose configuration
# This demonstrates containerization best practices:
# - Service isolation
# - Environment management
# - Volume persistence
# - Network configuration
# - Health checks

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: taskmanager-db
    environment:
      POSTGRES_DB: taskmanager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskmanager-backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    environment:
      DEBUG: "False"
      SECRET_KEY: "django-insecure-change-this-in-production"
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: taskmanager
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: db
      DB_PORT: 5432
      ALLOWED_HOSTS: localhost,127.0.0.1,backend
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/schema/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: taskmanager-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: taskmanager-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
    depends_on:
      - backend
      - frontend
    profiles:
      - production

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  default:
    name: taskmanager-network
